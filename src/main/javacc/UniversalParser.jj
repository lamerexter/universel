/*******************************************************************************
  ~  MIT Licence:
  ~
  ~  Copyright (c) 2019 Orthodox Engineering Ltd
  ~
  ~  Permission is hereby granted, free of charge, to any person
  ~  obtaining a copy of this software and associated documentation
  ~  files (the "Software"), to deal in the Software without restriction
  ~  including without limitation the rights to use, copy, modify, merge,
  ~  publish, distribute, sublicense, and/or sell copies of the Software,
  ~  and to permit persons to whom the Software is furnished to do so,
  ~  subject to the following conditions:
  ~
  ~  The above copyright notice and this permission notice shall be
  ~  included in all copies or substantial portions of the Software.
  ~
  ~  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  ~  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  ~  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
  ~  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  ~  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  ~  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  ~  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  ~  DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
//-------------------------------------------------------------------------------------------------
// Parser options
//-------------------------------------------------------------------------------------------------
options
{
   // Parser options:
   DEBUG_PARSER = false;                   // Whether the parser should output debugging information to diagnose problems.
   DEBUG_LOOKAHEAD = false;                // Whether the parser should output debugging information when making lookahead decisions.
   DEBUG_TOKEN_MANAGER = false;            // Whether the parser tokeniser should output debugging information to diagnose problems.
   LOOKAHEAD = 1;                          // The input stream symbol lookahead of the generated parser i.e. and LR(<nnn>) parser
   JAVA_UNICODE_ESCAPE = false;            // Whether Java Unicode sequences are expanded prior to transmission to the tokeniser.
   JDK_VERSION = "1.8";                    // The Java/JDK version of the parser to create
   UNICODE_INPUT = true;                   // Use a unicode capable input stream.
   FORCE_LA_CHECK = true;                  // Always carry out lookahead checking
   COMMON_TOKEN_ACTION=true;               // Call the CommonTokenAction token manager method on each token (special token processing)
}

PARSER_BEGIN(UniversalParser)
package org.orthodox.universal.parser;

import java.util.List;
import java.util.ArrayList;
import java.util.Deque;
import java.util.ArrayDeque;
import org.orthodox.universel.cst.*;
import org.orthodox.universel.cst.collections.*;
import org.orthodox.universel.cst.conditionals.*;
import org.orthodox.universel.cst.types.*;
import org.orthodox.universel.cst.literals.*;
import org.orthodox.universel.cst.TokenImage.TokenImageBuilder;
import java.io.StringReader;

public class UniversalParser
{
    public UniversalParser(String input) {
        this(new StringReader(input));
    }

    private TokenImage tokenImage() {
        return new TokenImage(token.beginLine, token.beginColumn, token.endLine, token.endColumn, token.image);
    }

    private TokenImage tokenImage(int startLine, int startColumn, int endLine, int endColumn) {
        return new TokenImage(startLine, startColumn, endLine, endColumn);
    }


   private <T> List<T> add(List<T> list, Object obj) {
      if (list == null) {
         list = new ArrayList<T>();
      }
      list.add((T)obj);
      return list;
   }
}
PARSER_END(UniversalParser)

//-------------------------------------------------------------------------------------------------
// Lexical Analyser definitions and tokens
//-------------------------------------------------------------------------------------------------
TOKEN_MGR_DECLS:
{
    Deque<Integer> stateStack = new ArrayDeque();

    private void CommonTokenAction(Token token) {
    }
}

// Ignore whitespace tokens
SKIP :
{
   " " | "\t" | "\r" | "\n"
}

// Reserved words, literals and operators - case sensitive
TOKEN :
{
  < AND: "and" > |
  < ASSERT: "assert" > |
  < BETWEEN: "between" > |
  < BOOLEAN: "boolean" > |
  < BYTE: "byte" > |
  < CASE: "case" > |
  < CATCH: "catch" > |
  < CHAR: "char" > |
  < CLASS: "class" > |
  < CONTAINS: "contains" > |
  < DO: "do" > |
  < DOUBLE: "double" > |
  < ELSE: "else" > |
  < ELSE_IF: "else if" > |
  < ENDCASE: "endcase" > |
  < ENUM: "enum" > |
  < EQ: "==" > |
  < EQUAL: ("equals"|"equal") > |
  < EXTENDS: "extends" > |
  < FINALLY: "finally" > |
  < FOR: "for" >  |
  < FLOAT: "float" >  |
  < FUNCTION: "function" >  |
  < GT: ">" >  |
  < IF: "if" > |
  < IMPLEMENTS: "implements" > |
  < IMPORT: "import" > |
  < IN: "in" > |
  < INSTANCEOF: "instanceof" > |
  < INT: "int" > |
  < INTERFACE: "interface" > |
  < IS: "is" > |
  < LT: "<" > |
  < LTGT: "<>" > |
  < LONG: "long" > |
  < LBRACE: "{" > { stateStack.push(curLexState); } |
  < NE: "!=" > |
  < NEW: "new" > |
  < NOT: "not" > |
  < NOT_EQUAL: "not" ([" "])* "equal" ("s")? > |
  < NOT_BETWEEN: "not" ([" "])* "between" > |
  < NOT_IN: "not" ([" "])* "in" > |
  < NULL: "null" > |
  < OR: "or" > |
  < PACKAGE: "package" > |
  < RANGE_INCLUSIVE: ".." > |
  < RBRACE: "}" > { if ( !stateStack.isEmpty() ) { SwitchTo(stateStack.pop()); } } |
  < RETURN: "return" > |
  < SHORT: "short" > |
  < TEQ: "===" > |
  < THEN: "then" > |
  < THROW: "throw" > |
  < THROWS: "Gthrows" > |
  < TRY: "try" > |
  < VAR: "var" > |
  < VOID: "void" > |
  < WHEN: "when" > |
  < WHILE: "while" >
}

/**
* Numeric literal tokens.
*/
TOKEN :
{
  < BOOLEAN_LITERAL: "true" | "false" >
| < #OCTAL_LITERAL: "0" ["0"-"7"]((["0"-"7","_"])*["0"-"7"])? >
| < OCTAL_INTEGER_LITERAL: <OCTAL_LITERAL> (["l","L","I"])? >
| < #BINARY_LITERAL: "0" ["b","B"] ["0","1"]((["0","1","_"])*["0","1"])? >
| < BINARY_INTEGER_LITERAL: <BINARY_LITERAL> (["l","L","I"])? >
| < #DECIMAL_LITERAL: ["0"-"9"]((["0"-"9","_"])*["0"-"9"])? >
| < DECIMAL_INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L","I"])? >
| < #HEX_DIGIT: ["0"-"9","a"-"f","A"-"F"] >
| < #HEX_DIGITS: <HEX_DIGIT> ((["0"-"9","a"-"f","A"-"F","_"])*<HEX_DIGIT>)? >
| < #HEX_LITERAL: "0" ["x","X"] <HEX_DIGITS> >
| < HEX_INTEGER_LITERAL: <HEX_LITERAL> (["l","L","I"])? >
| < DECIMAL_FLOATING_POINT_LITERAL:
      <DECIMAL_LITERAL> "." (<DECIMAL_LITERAL>)? (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
    | "." <DECIMAL_LITERAL> (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
    | <DECIMAL_LITERAL> <DECIMAL_EXPONENT> (["f","F","d","D"])?
    | <DECIMAL_LITERAL> (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
   {
     // Special case for decimals ending in dot (such as 1.) which are really the
     // start of a range (e.g. 1..2).  Look ahead and change matched token, if necessary
     if ( matchedToken.image.endsWith(".") ) {
       try {
         char ch = input_stream.readChar();
         if (ch == '.') {
           matchedToken.kind = DECIMAL_INTEGER_LITERAL;
           matchedToken.endColumn--;
           image.setLength(image.length()-1);
           matchedToken.image = image.toString();
           input_stream.backup(2);
         }
       }
       catch (java.io.IOException ioEx){
         // An EOF or IO error here will unfold later
       }
     }
   }
| < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (<DECIMAL_LITERAL>)+ >
| < HEX_FLOATING_POINT_LITERAL:
      <HEX_LITERAL> (".")? <HEX_EXPONENT> (["f","F","d","D"])?
    | "0" ["x","X"] (<HEX_DIGITS>)? "." <HEX_DIGITS> <HEX_EXPONENT> (["f","F","d","D"])?
  >
| < #HEX_EXPONENT: ["p","P"] (["+","-"])? <DECIMAL_LITERAL> >
}

/**
* String and character sequence literal tokens.
*/
TOKEN :
{
  < #UNICODE_ESCAPE: "\\u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> >
|
  < SQ_STRING:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | <UNICODE_ESCAPE>
      )*
      "'"
  >
|
  < TQ_STRING_START: "'''" > : WITHIN_TQ_STRING
|
  < DQ_INTERP_STRING_START: "\"" > : WITHIN_DQ_INTERP_STRING
|
  < TQ_INTERP_STRING_START: "\"\"\"" > : WITHIN_TQ_INTERP_STRING
|
  < IDENTIFIER: <IDENT_START> (<IDENT_REMAIN>)* >
|
  < #IDENT_START: [
         "\u0024",  "\u0041"-"\u005a",  "\u005f",  "\u0061"-"\u007a",  "\u00a2"-"\u00a5",  "\u00aa",  "\u00b5",
         "\u00ba",  "\u00c0"-"\u00d6",  "\u00d8"-"\u00f6",  "\u00f8"-"\u02c1",  "\u02c6"-"\u02d1",  "\u02e0"-"\u02e4",
         "\u02ec",  "\u02ee",  "\u0370"-"\u0374",  "\u0376"-"\u0377",  "\u037a"-"\u037d",  "\u037f",  "\u0386",
         "\u0388"-"\u038a",  "\u038c",  "\u038e"-"\u03a1",  "\u03a3"-"\u03f5",  "\u03f7"-"\u0481",  "\u048a"-"\u052f",
         "\u0531"-"\u0556",  "\u0559",  "\u0561"-"\u0587",  "\u058f",  "\u05d0"-"\u05ea",  "\u05f0"-"\u05f2",
         "\u060b",  "\u0620"-"\u064a",  "\u066e"-"\u066f",  "\u0671"-"\u06d3",  "\u06d5",  "\u06e5"-"\u06e6",
         "\u06ee"-"\u06ef",  "\u06fa"-"\u06fc",  "\u06ff",  "\u0710",  "\u0712"-"\u072f",  "\u074d"-"\u07a5",
         "\u07b1",  "\u07ca"-"\u07ea",  "\u07f4"-"\u07f5",  "\u07fa",  "\u0800"-"\u0815",  "\u081a",  "\u0824",
         "\u0828",  "\u0840"-"\u0858",  "\u0860"-"\u086a",  "\u08a0"-"\u08b4",  "\u08b6"-"\u08bd",  "\u0904"-"\u0939",
         "\u093d",  "\u0950",  "\u0958"-"\u0961",  "\u0971"-"\u0980",  "\u0985"-"\u098c",  "\u098f"-"\u0990",
         "\u0993"-"\u09a8",  "\u09aa"-"\u09b0",  "\u09b2",  "\u09b6"-"\u09b9",  "\u09bd",  "\u09ce",  "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",  "\u09f0"-"\u09f3",  "\u09fb"-"\u09fc",  "\u0a05"-"\u0a0a",  "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",  "\u0a2a"-"\u0a30",  "\u0a32"-"\u0a33",  "\u0a35"-"\u0a36",  "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",  "\u0a5e",  "\u0a72"-"\u0a74",  "\u0a85"-"\u0a8d",  "\u0a8f"-"\u0a91",  "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",  "\u0ab2"-"\u0ab3",  "\u0ab5"-"\u0ab9",  "\u0abd",  "\u0ad0",  "\u0ae0"-"\u0ae1",
         "\u0af1",  "\u0af9",  "\u0b05"-"\u0b0c",  "\u0b0f"-"\u0b10",  "\u0b13"-"\u0b28",  "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",  "\u0b35"-"\u0b39",  "\u0b3d",  "\u0b5c"-"\u0b5d",  "\u0b5f"-"\u0b61",  "\u0b71",
         "\u0b83",  "\u0b85"-"\u0b8a",  "\u0b8e"-"\u0b90",  "\u0b92"-"\u0b95",  "\u0b99"-"\u0b9a",  "\u0b9c",
         "\u0b9e"-"\u0b9f",  "\u0ba3"-"\u0ba4",  "\u0ba8"-"\u0baa",  "\u0bae"-"\u0bb9",  "\u0bd0",  "\u0bf9",
         "\u0c05"-"\u0c0c",  "\u0c0e"-"\u0c10",  "\u0c12"-"\u0c28",  "\u0c2a"-"\u0c39",  "\u0c3d",  "\u0c58"-"\u0c5a",
         "\u0c60"-"\u0c61",  "\u0c80",  "\u0c85"-"\u0c8c",  "\u0c8e"-"\u0c90",  "\u0c92"-"\u0ca8",  "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",  "\u0cbd",  "\u0cde",  "\u0ce0"-"\u0ce1",  "\u0cf1"-"\u0cf2",  "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",  "\u0d12"-"\u0d3a",  "\u0d3d",  "\u0d4e",  "\u0d54"-"\u0d56",  "\u0d5f"-"\u0d61",
         "\u0d7a"-"\u0d7f",  "\u0d85"-"\u0d96",  "\u0d9a"-"\u0db1",  "\u0db3"-"\u0dbb",  "\u0dbd",  "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",  "\u0e32"-"\u0e33",  "\u0e3f"-"\u0e46",  "\u0e81"-"\u0e82",  "\u0e84",  "\u0e87"-"\u0e88",
         "\u0e8a",  "\u0e8d",  "\u0e94"-"\u0e97",  "\u0e99"-"\u0e9f",  "\u0ea1"-"\u0ea3",  "\u0ea5",  "\u0ea7",
         "\u0eaa"-"\u0eab",  "\u0ead"-"\u0eb0",  "\u0eb2"-"\u0eb3",  "\u0ebd",  "\u0ec0"-"\u0ec4",  "\u0ec6",
         "\u0edc"-"\u0edf",  "\u0f00",  "\u0f40"-"\u0f47",  "\u0f49"-"\u0f6c",  "\u0f88"-"\u0f8c",  "\u1000"-"\u102a",
         "\u103f",  "\u1050"-"\u1055",  "\u105a"-"\u105d",  "\u1061",  "\u1065"-"\u1066",  "\u106e"-"\u1070",
         "\u1075"-"\u1081",  "\u108e",  "\u10a0"-"\u10c5",  "\u10c7",  "\u10cd",  "\u10d0"-"\u10fa",  "\u10fc"-"\u1248",
         "\u124a"-"\u124d",  "\u1250"-"\u1256",  "\u1258",  "\u125a"-"\u125d",  "\u1260"-"\u1288",  "\u128a"-"\u128d",
         "\u1290"-"\u12b0",  "\u12b2"-"\u12b5",  "\u12b8"-"\u12be",  "\u12c0",  "\u12c2"-"\u12c5",  "\u12c8"-"\u12d6",
         "\u12d8"-"\u1310",  "\u1312"-"\u1315",  "\u1318"-"\u135a",  "\u1380"-"\u138f",  "\u13a0"-"\u13f5",
         "\u13f8"-"\u13fd",  "\u1401"-"\u166c",  "\u166f"-"\u167f",  "\u1681"-"\u169a",  "\u16a0"-"\u16ea",
         "\u16ee"-"\u16f8",  "\u1700"-"\u170c",  "\u170e"-"\u1711",  "\u1720"-"\u1731",  "\u1740"-"\u1751",
         "\u1760"-"\u176c",  "\u176e"-"\u1770",  "\u1780"-"\u17b3",  "\u17d7",  "\u17db"-"\u17dc",  "\u1820"-"\u1877",
         "\u1880"-"\u1884",  "\u1887"-"\u18a8",  "\u18aa",  "\u18b0"-"\u18f5",  "\u1900"-"\u191e",  "\u1950"-"\u196d",
         "\u1970"-"\u1974",  "\u1980"-"\u19ab",  "\u19b0"-"\u19c9",  "\u1a00"-"\u1a16",  "\u1a20"-"\u1a54",
         "\u1aa7",  "\u1b05"-"\u1b33",  "\u1b45"-"\u1b4b",  "\u1b83"-"\u1ba0",  "\u1bae"-"\u1baf",  "\u1bba"-"\u1be5",
         "\u1c00"-"\u1c23",  "\u1c4d"-"\u1c4f",  "\u1c5a"-"\u1c7d",  "\u1c80"-"\u1c88",  "\u1ce9"-"\u1cec",
         "\u1cee"-"\u1cf1",  "\u1cf5"-"\u1cf6",  "\u1d00"-"\u1dbf",  "\u1e00"-"\u1f15",  "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",  "\u1f48"-"\u1f4d",  "\u1f50"-"\u1f57",  "\u1f59",  "\u1f5b",  "\u1f5d",  "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",  "\u1fb6"-"\u1fbc",  "\u1fbe",  "\u1fc2"-"\u1fc4",  "\u1fc6"-"\u1fcc",  "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",  "\u1fe0"-"\u1fec",  "\u1ff2"-"\u1ff4",  "\u1ff6"-"\u1ffc",  "\u203f"-"\u2040",
         "\u2054",  "\u2071",  "\u207f",  "\u2090"-"\u209c",  "\u20a0"-"\u20bf",  "\u2102",  "\u2107",  "\u210a"-"\u2113",
         "\u2115",  "\u2119"-"\u211d",  "\u2124",  "\u2126",  "\u2128",  "\u212a"-"\u212d",  "\u212f"-"\u2139",
         "\u213c"-"\u213f",  "\u2145"-"\u2149",  "\u214e",  "\u2160"-"\u2188",  "\u2c00"-"\u2c2e",  "\u2c30"-"\u2c5e",
         "\u2c60"-"\u2ce4",  "\u2ceb"-"\u2cee",  "\u2cf2"-"\u2cf3",  "\u2d00"-"\u2d25",  "\u2d27",  "\u2d2d",
         "\u2d30"-"\u2d67",  "\u2d6f",  "\u2d80"-"\u2d96",  "\u2da0"-"\u2da6",  "\u2da8"-"\u2dae",  "\u2db0"-"\u2db6",
         "\u2db8"-"\u2dbe",  "\u2dc0"-"\u2dc6",  "\u2dc8"-"\u2dce",  "\u2dd0"-"\u2dd6",  "\u2dd8"-"\u2dde",
         "\u2e2f",  "\u3005"-"\u3007",  "\u3021"-"\u3029",  "\u3031"-"\u3035",  "\u3038"-"\u303c",  "\u3041"-"\u3096",
         "\u309d"-"\u309f",  "\u30a1"-"\u30fa",  "\u30fc"-"\u30ff",  "\u3105"-"\u312e",  "\u3131"-"\u318e",
         "\u31a0"-"\u31ba",  "\u31f0"-"\u31ff",  "\u3400"-"\u4db5",  "\u4e00"-"\u9fea",  "\ua000"-"\ua48c",
         "\ua4d0"-"\ua4fd",  "\ua500"-"\ua60c",  "\ua610"-"\ua61f",  "\ua62a"-"\ua62b",  "\ua640"-"\ua66e",
         "\ua67f"-"\ua69d",  "\ua6a0"-"\ua6ef",  "\ua717"-"\ua71f",  "\ua722"-"\ua788",  "\ua78b"-"\ua7ae",
         "\ua7b0"-"\ua7b7",  "\ua7f7"-"\ua801",  "\ua803"-"\ua805",  "\ua807"-"\ua80a",  "\ua80c"-"\ua822",
         "\ua838",  "\ua840"-"\ua873",  "\ua882"-"\ua8b3",  "\ua8f2"-"\ua8f7",  "\ua8fb",  "\ua8fd",  "\ua90a"-"\ua925",
         "\ua930"-"\ua946",  "\ua960"-"\ua97c",  "\ua984"-"\ua9b2",  "\ua9cf",  "\ua9e0"-"\ua9e4",  "\ua9e6"-"\ua9ef",
         "\ua9fa"-"\ua9fe",  "\uaa00"-"\uaa28",  "\uaa40"-"\uaa42",  "\uaa44"-"\uaa4b",  "\uaa60"-"\uaa76",
         "\uaa7a",  "\uaa7e"-"\uaaaf",  "\uaab1",  "\uaab5"-"\uaab6",  "\uaab9"-"\uaabd",  "\uaac0",  "\uaac2",
         "\uaadb"-"\uaadd",  "\uaae0"-"\uaaea",  "\uaaf2"-"\uaaf4",  "\uab01"-"\uab06",  "\uab09"-"\uab0e",
         "\uab11"-"\uab16",  "\uab20"-"\uab26",  "\uab28"-"\uab2e",  "\uab30"-"\uab5a",  "\uab5c"-"\uab65",
         "\uab70"-"\uabe2",  "\uac00"-"\ud7a3",  "\ud7b0"-"\ud7c6",  "\ud7cb"-"\ud7fb",  "\ud800"-"\udfff",
         "\uf900"-"\ufa6d",  "\ufa70"-"\ufad9",  "\ufb00"-"\ufb06",  "\ufb13"-"\ufb17",  "\ufb1d",  "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",  "\ufb38"-"\ufb3c",  "\ufb3e",  "\ufb40"-"\ufb41",  "\ufb43"-"\ufb44",  "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",  "\ufd50"-"\ufd8f",  "\ufd92"-"\ufdc7",  "\ufdf0"-"\ufdfc",  "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",  "\ufe69",  "\ufe70"-"\ufe74",  "\ufe76"-"\ufefc",  "\uff04",  "\uff21"-"\uff3a",
         "\uff3f",  "\uff41"-"\uff5a",  "\uff66"-"\uffbe",  "\uffc2"-"\uffc7",  "\uffca"-"\uffcf",  "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",  "\uffe0"-"\uffe1",  "\uffe5"-"\uffe6"  ]
        | <UNICODE_ESCAPE>
  >
|
  < #IDENT_REMAIN: [
         "\u0000"-"\u0008",  "\u000e"-"\u001b",  "\u0024",  "\u0030"-"\u0039",  "\u0041"-"\u005a",  "\u005f",
         "\u0061"-"\u007a",  "\u007f"-"\u009f",  "\u00a2"-"\u00a5",  "\u00aa",  "\u00ad",  "\u00b5",  "\u00ba",
         "\u00c0"-"\u00d6",  "\u00d8"-"\u00f6",  "\u00f8"-"\u02c1",  "\u02c6"-"\u02d1",  "\u02e0"-"\u02e4",
         "\u02ec",  "\u02ee",  "\u0300"-"\u0374",  "\u0376"-"\u0377",  "\u037a"-"\u037d",  "\u037f",  "\u0386",
         "\u0388"-"\u038a",  "\u038c",  "\u038e"-"\u03a1",  "\u03a3"-"\u03f5",  "\u03f7"-"\u0481",  "\u0483"-"\u0487",
         "\u048a"-"\u052f",  "\u0531"-"\u0556",  "\u0559",  "\u0561"-"\u0587",  "\u058f",  "\u0591"-"\u05bd",
         "\u05bf",  "\u05c1"-"\u05c2",  "\u05c4"-"\u05c5",  "\u05c7",  "\u05d0"-"\u05ea",  "\u05f0"-"\u05f2",
         "\u0600"-"\u0605",  "\u060b",  "\u0610"-"\u061a",  "\u061c",  "\u0620"-"\u0669",  "\u066e"-"\u06d3",
         "\u06d5"-"\u06dd",  "\u06df"-"\u06e8",  "\u06ea"-"\u06fc",  "\u06ff",  "\u070f"-"\u074a",  "\u074d"-"\u07b1",
         "\u07c0"-"\u07f5",  "\u07fa",  "\u0800"-"\u082d",  "\u0840"-"\u085b",  "\u0860"-"\u086a",  "\u08a0"-"\u08b4",
         "\u08b6"-"\u08bd",  "\u08d4"-"\u0963",  "\u0966"-"\u096f",  "\u0971"-"\u0983",  "\u0985"-"\u098c",
         "\u098f"-"\u0990",  "\u0993"-"\u09a8",  "\u09aa"-"\u09b0",  "\u09b2",  "\u09b6"-"\u09b9",  "\u09bc"-"\u09c4",
         "\u09c7"-"\u09c8",  "\u09cb"-"\u09ce",  "\u09d7",  "\u09dc"-"\u09dd",  "\u09df"-"\u09e3",  "\u09e6"-"\u09f3",
         "\u09fb"-"\u09fc",  "\u0a01"-"\u0a03",  "\u0a05"-"\u0a0a",  "\u0a0f"-"\u0a10",  "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",  "\u0a32"-"\u0a33",  "\u0a35"-"\u0a36",  "\u0a38"-"\u0a39",  "\u0a3c",  "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",  "\u0a4b"-"\u0a4d",  "\u0a51",  "\u0a59"-"\u0a5c",  "\u0a5e",  "\u0a66"-"\u0a75",
         "\u0a81"-"\u0a83",  "\u0a85"-"\u0a8d",  "\u0a8f"-"\u0a91",  "\u0a93"-"\u0aa8",  "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",  "\u0ab5"-"\u0ab9",  "\u0abc"-"\u0ac5",  "\u0ac7"-"\u0ac9",  "\u0acb"-"\u0acd",
         "\u0ad0",  "\u0ae0"-"\u0ae3",  "\u0ae6"-"\u0aef",  "\u0af1",  "\u0af9"-"\u0aff",  "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",  "\u0b0f"-"\u0b10",  "\u0b13"-"\u0b28",  "\u0b2a"-"\u0b30",  "\u0b32"-"\u0b33",
         "\u0b35"-"\u0b39",  "\u0b3c"-"\u0b44",  "\u0b47"-"\u0b48",  "\u0b4b"-"\u0b4d",  "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",  "\u0b5f"-"\u0b63",  "\u0b66"-"\u0b6f",  "\u0b71",  "\u0b82"-"\u0b83",  "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",  "\u0b92"-"\u0b95",  "\u0b99"-"\u0b9a",  "\u0b9c",  "\u0b9e"-"\u0b9f",  "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",  "\u0bae"-"\u0bb9",  "\u0bbe"-"\u0bc2",  "\u0bc6"-"\u0bc8",  "\u0bca"-"\u0bcd",
         "\u0bd0",  "\u0bd7",  "\u0be6"-"\u0bef",  "\u0bf9",  "\u0c00"-"\u0c03",  "\u0c05"-"\u0c0c",  "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",  "\u0c2a"-"\u0c39",  "\u0c3d"-"\u0c44",  "\u0c46"-"\u0c48",  "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",  "\u0c58"-"\u0c5a",  "\u0c60"-"\u0c63",  "\u0c66"-"\u0c6f",  "\u0c80"-"\u0c83",
         "\u0c85"-"\u0c8c",  "\u0c8e"-"\u0c90",  "\u0c92"-"\u0ca8",  "\u0caa"-"\u0cb3",  "\u0cb5"-"\u0cb9",
         "\u0cbc"-"\u0cc4",  "\u0cc6"-"\u0cc8",  "\u0cca"-"\u0ccd",  "\u0cd5"-"\u0cd6",  "\u0cde",  "\u0ce0"-"\u0ce3",
         "\u0ce6"-"\u0cef",  "\u0cf1"-"\u0cf2",  "\u0d00"-"\u0d03",  "\u0d05"-"\u0d0c",  "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d44",  "\u0d46"-"\u0d48",  "\u0d4a"-"\u0d4e",  "\u0d54"-"\u0d57",  "\u0d5f"-"\u0d63",
         "\u0d66"-"\u0d6f",  "\u0d7a"-"\u0d7f",  "\u0d82"-"\u0d83",  "\u0d85"-"\u0d96",  "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",  "\u0dbd",  "\u0dc0"-"\u0dc6",  "\u0dca",  "\u0dcf"-"\u0dd4",  "\u0dd6",  "\u0dd8"-"\u0ddf",
         "\u0de6"-"\u0def",  "\u0df2"-"\u0df3",  "\u0e01"-"\u0e3a",  "\u0e3f"-"\u0e4e",  "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",  "\u0e84",  "\u0e87"-"\u0e88",  "\u0e8a",  "\u0e8d",  "\u0e94"-"\u0e97",  "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",  "\u0ea5",  "\u0ea7",  "\u0eaa"-"\u0eab",  "\u0ead"-"\u0eb9",  "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",  "\u0ec6",  "\u0ec8"-"\u0ecd",  "\u0ed0"-"\u0ed9",  "\u0edc"-"\u0edf",  "\u0f00",
         "\u0f18"-"\u0f19",  "\u0f20"-"\u0f29",  "\u0f35",  "\u0f37",  "\u0f39",  "\u0f3e"-"\u0f47",  "\u0f49"-"\u0f6c",
         "\u0f71"-"\u0f84",  "\u0f86"-"\u0f97",  "\u0f99"-"\u0fbc",  "\u0fc6",  "\u1000"-"\u1049",  "\u1050"-"\u109d",
         "\u10a0"-"\u10c5",  "\u10c7",  "\u10cd",  "\u10d0"-"\u10fa",  "\u10fc"-"\u1248",  "\u124a"-"\u124d",
         "\u1250"-"\u1256",  "\u1258",  "\u125a"-"\u125d",  "\u1260"-"\u1288",  "\u128a"-"\u128d",  "\u1290"-"\u12b0",
         "\u12b2"-"\u12b5",  "\u12b8"-"\u12be",  "\u12c0",  "\u12c2"-"\u12c5",  "\u12c8"-"\u12d6",  "\u12d8"-"\u1310",
         "\u1312"-"\u1315",  "\u1318"-"\u135a",  "\u135d"-"\u135f",  "\u1380"-"\u138f",  "\u13a0"-"\u13f5",
         "\u13f8"-"\u13fd",  "\u1401"-"\u166c",  "\u166f"-"\u167f",  "\u1681"-"\u169a",  "\u16a0"-"\u16ea",
         "\u16ee"-"\u16f8",  "\u1700"-"\u170c",  "\u170e"-"\u1714",  "\u1720"-"\u1734",  "\u1740"-"\u1753",
         "\u1760"-"\u176c",  "\u176e"-"\u1770",  "\u1772"-"\u1773",  "\u1780"-"\u17d3",  "\u17d7",  "\u17db"-"\u17dd",
         "\u17e0"-"\u17e9",  "\u180b"-"\u180e",  "\u1810"-"\u1819",  "\u1820"-"\u1877",  "\u1880"-"\u18aa",
         "\u18b0"-"\u18f5",  "\u1900"-"\u191e",  "\u1920"-"\u192b",  "\u1930"-"\u193b",  "\u1946"-"\u196d",
         "\u1970"-"\u1974",  "\u1980"-"\u19ab",  "\u19b0"-"\u19c9",  "\u19d0"-"\u19d9",  "\u1a00"-"\u1a1b",
         "\u1a20"-"\u1a5e",  "\u1a60"-"\u1a7c",  "\u1a7f"-"\u1a89",  "\u1a90"-"\u1a99",  "\u1aa7",  "\u1ab0"-"\u1abd",
         "\u1b00"-"\u1b4b",  "\u1b50"-"\u1b59",  "\u1b6b"-"\u1b73",  "\u1b80"-"\u1bf3",  "\u1c00"-"\u1c37",
         "\u1c40"-"\u1c49",  "\u1c4d"-"\u1c7d",  "\u1c80"-"\u1c88",  "\u1cd0"-"\u1cd2",  "\u1cd4"-"\u1cf9",
         "\u1d00"-"\u1df9",  "\u1dfb"-"\u1f15",  "\u1f18"-"\u1f1d",  "\u1f20"-"\u1f45",  "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",  "\u1f59",  "\u1f5b",  "\u1f5d",  "\u1f5f"-"\u1f7d",  "\u1f80"-"\u1fb4",  "\u1fb6"-"\u1fbc",
         "\u1fbe",  "\u1fc2"-"\u1fc4",  "\u1fc6"-"\u1fcc",  "\u1fd0"-"\u1fd3",  "\u1fd6"-"\u1fdb",  "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",  "\u1ff6"-"\u1ffc",  "\u200b"-"\u200f",  "\u202a"-"\u202e",  "\u203f"-"\u2040",
         "\u2054",  "\u2060"-"\u2064",  "\u2066"-"\u206f",  "\u2071",  "\u207f",  "\u2090"-"\u209c",  "\u20a0"-"\u20bf",
         "\u20d0"-"\u20dc",  "\u20e1",  "\u20e5"-"\u20f0",  "\u2102",  "\u2107",  "\u210a"-"\u2113",  "\u2115",
         "\u2119"-"\u211d",  "\u2124",  "\u2126",  "\u2128",  "\u212a"-"\u212d",  "\u212f"-"\u2139",  "\u213c"-"\u213f",
         "\u2145"-"\u2149",  "\u214e",  "\u2160"-"\u2188",  "\u2c00"-"\u2c2e",  "\u2c30"-"\u2c5e",  "\u2c60"-"\u2ce4",
         "\u2ceb"-"\u2cf3",  "\u2d00"-"\u2d25",  "\u2d27",  "\u2d2d",  "\u2d30"-"\u2d67",  "\u2d6f",  "\u2d7f"-"\u2d96",
         "\u2da0"-"\u2da6",  "\u2da8"-"\u2dae",  "\u2db0"-"\u2db6",  "\u2db8"-"\u2dbe",  "\u2dc0"-"\u2dc6",
         "\u2dc8"-"\u2dce",  "\u2dd0"-"\u2dd6",  "\u2dd8"-"\u2dde",  "\u2de0"-"\u2dff",  "\u2e2f",  "\u3005"-"\u3007",
         "\u3021"-"\u302f",  "\u3031"-"\u3035",  "\u3038"-"\u303c",  "\u3041"-"\u3096",  "\u3099"-"\u309a",
         "\u309d"-"\u309f",  "\u30a1"-"\u30fa",  "\u30fc"-"\u30ff",  "\u3105"-"\u312e",  "\u3131"-"\u318e",
         "\u31a0"-"\u31ba",  "\u31f0"-"\u31ff",  "\u3400"-"\u4db5",  "\u4e00"-"\u9fea",  "\ua000"-"\ua48c",
         "\ua4d0"-"\ua4fd",  "\ua500"-"\ua60c",  "\ua610"-"\ua62b",  "\ua640"-"\ua66f",  "\ua674"-"\ua67d",
         "\ua67f"-"\ua6f1",  "\ua717"-"\ua71f",  "\ua722"-"\ua788",  "\ua78b"-"\ua7ae",  "\ua7b0"-"\ua7b7",
         "\ua7f7"-"\ua827",  "\ua838",  "\ua840"-"\ua873",  "\ua880"-"\ua8c5",  "\ua8d0"-"\ua8d9",  "\ua8e0"-"\ua8f7",
         "\ua8fb",  "\ua8fd",  "\ua900"-"\ua92d",  "\ua930"-"\ua953",  "\ua960"-"\ua97c",  "\ua980"-"\ua9c0",
         "\ua9cf"-"\ua9d9",  "\ua9e0"-"\ua9fe",  "\uaa00"-"\uaa36",  "\uaa40"-"\uaa4d",  "\uaa50"-"\uaa59",
         "\uaa60"-"\uaa76",  "\uaa7a"-"\uaac2",  "\uaadb"-"\uaadd",  "\uaae0"-"\uaaef",  "\uaaf2"-"\uaaf6",
         "\uab01"-"\uab06",  "\uab09"-"\uab0e",  "\uab11"-"\uab16",  "\uab20"-"\uab26",  "\uab28"-"\uab2e",
         "\uab30"-"\uab5a",  "\uab5c"-"\uab65",  "\uab70"-"\uabea",  "\uabec"-"\uabed",  "\uabf0"-"\uabf9",
         "\uac00"-"\ud7a3",  "\ud7b0"-"\ud7c6",  "\ud7cb"-"\ud7fb",  "\ud800"-"\udfff",  "\uf900"-"\ufa6d",
         "\ufa70"-"\ufad9",  "\ufb00"-"\ufb06",  "\ufb13"-"\ufb17",  "\ufb1d"-"\ufb28",  "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",  "\ufb3e",  "\ufb40"-"\ufb41",  "\ufb43"-"\ufb44",  "\ufb46"-"\ufbb1",  "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",  "\ufd92"-"\ufdc7",  "\ufdf0"-"\ufdfc",  "\ufe00"-"\ufe0f",  "\ufe20"-"\ufe2f",
         "\ufe33"-"\ufe34",  "\ufe4d"-"\ufe4f",  "\ufe69",  "\ufe70"-"\ufe74",  "\ufe76"-"\ufefc",  "\ufeff",
         "\uff04",  "\uff10"-"\uff19",  "\uff21"-"\uff3a",  "\uff3f",  "\uff41"-"\uff5a",  "\uff66"-"\uffbe",
         "\uffc2"-"\uffc7",  "\uffca"-"\uffcf",  "\uffd2"-"\uffd7",  "\uffda"-"\uffdc",  "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",  "\ufff9"-"\ufffb" ]
        | <UNICODE_ESCAPE>
  >
}

<WITHIN_TQ_STRING> TOKEN :
{
  <TQ_STRING_CHAR:
    (
        ~["'","\\"]
         | ("\\"
             ( ["n","t","b","r","f","\\","'","\""]
             | ["0"-"7"] ( ["0"-"7"] )?
             | ["0"-"3"] ["0"-"7"] ["0"-"7"]
             )
           )
         | "'"
         | <UNICODE_ESCAPE>
    )
  >
  |
  <TQ_STRING_END: ("'")* "'''" > : DEFAULT
}

<WITHIN_DQ_INTERP_STRING> TOKEN :
{
  <DQ_INTERP_STRING_COMPLEX_EXPR_START: "${" > { stateStack.push(WITHIN_DQ_INTERP_STRING); } : DEFAULT
  |
  <DQ_INTERP_STRING_CHAR:
    (
        ~["\"","\\","\n","\r"]
        | "$"
        | (
            "\\"
            ( ["n","t","b","r","f","\\","'","\"", "$"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | <UNICODE_ESCAPE>
    )
  >
  |
  <DQ_INTERP_STRING_END: "\""> : DEFAULT
}

<WITHIN_DQ_INTERP_STRING_COMPLEX_EXPR > MORE :
{
    <DQ_INTERP_STRING_COMPLEX_EXPR_CHAR: (~[])>
}

<WITHIN_TQ_INTERP_STRING> TOKEN :
{
  <TQ_INTERP_STRING_COMPLEX_EXPR_START: "${"> { stateStack.push(WITHIN_TQ_INTERP_STRING); } : DEFAULT
  |
  <TQ_INTERP_STRING_CHAR:
    (
        ~["\\","\""]
        | "$"
        | (
            "\\"
            ( ["n","t","b","r","f","\\","'","\"", "$"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | <UNICODE_ESCAPE>
    )
  >
  |
  <TQ_INTERP_STRING_DQ_CHAR: "\"">
  |
  <TQ_INTERP_STRING_END: ("\"")* "\"\"\"" > : DEFAULT
}

<WITHIN_TQ_INTERP_STRING_COMPLEX_EXPR > MORE :
{
    <TQ_INTERP_STRING_COMPLEX_EXPR_CHAR: (~[])>
}

public Script script():
{
    TokenImage tokenImage = null;
    List<Node> bodyElements = null;
    Node expr = null;
    ImportDecl importDecl = null;
}
{
    [ importDecl=ImportDeclaration() ]

    ( expr=PrimaryExpression() { bodyElements=add(bodyElements, expr); } )*

    <EOF>

    { return new Script(importDecl, bodyElements); }
}

Expression PrimaryExpression():
{
    Expression expr;
}
{
    expr=RValueExpression()

    { return expr; }
}

Expression RValueExpression():
{
    Expression expr;
}
{
    expr=ConditionalExpression()

    { return expr; }
}

Expression ConditionalExpression() :
{
	Expression expr;
	Expression lhsExpr;
	Expression rhsExpr = null;
}
{
   expr=LogicalOrExpression()

   [
      (
         "?" lhsExpr=ConditionalExpression() ":" rhsExpr=ConditionalExpression() { expr=new TernaryExpression(expr, lhsExpr, rhsExpr); }
      )
      |
      (
         "?:" lhsExpr=ConditionalExpression() { expr=new ElvisExpression(expr, lhsExpr); }
      )
   ]

   { return expr; }
}

Expression LogicalOrExpression() :
{
	Expression expr;
	Expression rhsExpr;
}
{
   expr=LogicalAndExpression() ( ("||" | <OR>) rhsExpr=LogicalAndExpression() { expr=new BinaryExpression(Operator.LOGICAL_OR, expr, rhsExpr); } )*

   { return expr; }
}

Expression LogicalAndExpression() :
{
	Expression expr;
	Expression rhsExpr;
}
{
   expr=InclusiveOrExpressionWithNullTest() ( ("&&" | <AND>) rhsExpr=InclusiveOrExpressionWithNullTest() { expr=new BinaryExpression(Operator.LOGICAL_AND, expr, rhsExpr); } )*

   { return expr; }
}

Expression InclusiveOrExpressionWithNullTest() :
{
	Expression expr;
}
{
	expr=InclusiveOrExpression()
	[
	   <IS> (<NULL> { expr = new NullTestExpression(expr, false); }
	         |
	         <NOT> <NULL> { expr = new NullTestExpression(expr, true); }
	        )
	]

   { return expr; }
}

Expression InclusiveOrExpression() :
{
	Expression expr;
	Expression rhsExpr;
}
{
   expr=ExclusiveOrExpression()
   (
      "|"
      rhsExpr=ExclusiveOrExpression() {  expr=new BinaryExpression(Operator.PIPE, expr, rhsExpr); }
   )*

   { return expr; }
}

Expression ExclusiveOrExpression() :
{
	Expression expr;
	Expression rhsExpr;
}
{
   expr=AndExpression()
   (
      "^"
      rhsExpr=AndExpression() {  expr=new BinaryExpression(Operator.CARAT, expr, rhsExpr); }
   )*

   { return expr; }
}

Expression AndExpression() :
{
	Expression expr;
	Expression rhsExpr;
}
{
   expr=RelationalExpression()
   (
      "&"
      rhsExpr=RelationalExpression() {  expr=new BinaryExpression(Operator.AMPERSAND, expr, rhsExpr); }
   )*

   { return expr; }
}

Expression RelationalExpression() :
{
	Expression expr;
	Expression lhsExpr;
	Expression rhsExpr = null;
	ReferenceType type = null;
	List<Node> exprList = null;
}
{
   expr=ShiftExpression()
   (
      (
      (<EQ> | <EQUAL>) rhsExpr=ShiftExpression() {  expr=new BinaryExpression(Operator.EQUAL, expr, rhsExpr); }
      |
      <TEQ>  rhsExpr=ShiftExpression() { expr=new BinaryExpression(Operator.TREBLE_EQUAL, expr, rhsExpr); }
      |
      "<"  rhsExpr=ShiftExpression() { expr=new BinaryExpression(Operator.LESS_THAN, expr, rhsExpr); }
      |
      ">"  rhsExpr=ShiftExpression() { expr=new BinaryExpression(Operator.GREATER_THAN, expr, rhsExpr); }
      |
      "<=" rhsExpr=ShiftExpression() { expr=new BinaryExpression(Operator.LESS_THAN_EQUAL, expr, rhsExpr); }
      |
      ">=" rhsExpr=ShiftExpression() { expr=new BinaryExpression(Operator.GREATER_THAN_EQUAL, expr, rhsExpr); }
      |
      <IN> rhsExpr=ShiftExpression() { expr=new InExpression(expr, rhsExpr, false); }
      |
      <INSTANCEOF> type=ReferenceType() { expr=new InstanceofExpression(Operator.INSTANCE_OF, expr, type); }
      |
      <BETWEEN> lhsExpr=ShiftExpression() <AND> rhsExpr=ShiftExpression() { expr=new BetweenExpression(expr, lhsExpr, rhsExpr, false); }
      |
      <LTGT> rhsExpr=ShiftExpression() {  expr=new BinaryExpression(Operator.LESS_GREATER_THAN, expr, rhsExpr); }
      |
      (<NE> | <NOT_EQUAL>) rhsExpr=ShiftExpression() {  expr=new BinaryExpression(Operator.EXCLAMATION_EQUAL, expr, rhsExpr); }
      |
      <NOT_BETWEEN> lhsExpr=ShiftExpression() <AND> rhsExpr=ShiftExpression() { expr=new BetweenExpression(expr, lhsExpr, rhsExpr, true); }
      |
      <NOT_IN> lhsExpr=ShiftExpression() <AND> rhsExpr=ShiftExpression() { expr=new BetweenExpression(expr, lhsExpr, rhsExpr, true); }
      |
      <CONTAINS> rhsExpr=ShiftExpression() { expr=new BinaryExpression(Operator.CONTAINS, expr, rhsExpr); }
      )
   )*

   { return expr; }
}

TypeReference Type():
{
    TypeReference type;
}
{
    (
      "boolean" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Boolean); }
    |
      "char" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Char); }
    |
      "byte" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Byte); }
    |
      "short" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Short); }
    |
      "int" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Int); }
    |
      "long" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Long); }
    |
      "float" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Float); }
    |
      "double" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Double); }
    )

    { return type; }
}

ReferenceType ReferenceType():
{
    TypeReference referredType;
    int arrayCount = 0;
    int endLine = -1;
    int endColumn = -1 ;

}
{
  (
      referredType = PrimitiveType() ( LOOKAHEAD(2) "[" "]" { arrayCount++; endLine = token.endLine; endColumn = token.endColumn; } )+
  |
      referredType = ClassOrInterfaceType() ( LOOKAHEAD(2) "[" "]" { arrayCount++; endLine = token.endLine; endColumn = token.endColumn; } )*
  )

  { return new ReferenceType(TokenImage.builder()
                                       .range(referredType).endLine(endLine).endColumn(endColumn)
                                       .build(),
                             referredType, arrayCount); }
}

TypeReference PrimitiveType():
{
    TypeReference type;
}
{
    (
      "boolean" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Boolean); }
    |
      "char" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Char); }
    |
      "byte" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Byte); }
    |
      "short" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Short); }
    |
      "int" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Int); }
    |
      "long" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Long); }
    |
      "float" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Float); }
    |
      "double" { type = new PrimitiveType(tokenImage(), PrimitiveType.Primitive.Double); }
    )

    { return type; }
}

ClassOrInterfaceType ClassOrInterfaceType() :
{
	String typeName;
	TokenImageBuilder tib;
	List<TypeReference> typeArgs = null;
	ClassOrInterfaceType cit = null;
}
{
  <IDENTIFIER> { tib=TokenImage.builder();
                 tib.startLine(token.beginLine).startColumn(token.beginColumn);
                 tib.endLine(token.endLine).endColumn(token.endColumn);
                 typeName = token.image;
                 cit = new ClassOrInterfaceType(tib.build(), null, typeName, null);
               }
  [ LOOKAHEAD(2) typeArgs = TypeArguments() ] { tib.range(typeArgs); cit = new ClassOrInterfaceType(tib.build(), null, typeName, typeArgs); }
  (
      LOOKAHEAD(2) "." <IDENTIFIER> { tib.endLine(token.beginLine).endColumn(token.beginColumn); typeName = token.image; }
      [ LOOKAHEAD(2) typeArgs = TypeArguments() ] { tib.range(typeArgs); cit = new ClassOrInterfaceType(tib.build(), cit, typeName, typeArgs); }
  )*
  { return cit; }
}

List<TypeReference> TypeArguments():
{
    List<TypeReference> types = null;
    TypeReference type;
}
{
   "<" type = TypeArgument() { types = add(types, type); } ( "," type = TypeArgument() { types = add(types, type); } )* ">"
   { return types; }
}

TypeReference TypeArgument():
{
    TypeReference type;
}
{
 (
   type = Type()
 |
   type = Wildcard()
 )
 { return type; }
}

WildcardType Wildcard():
{
    TypeReference ext = null;
    TypeReference sup = null;
    int line;
    int column;
}
{
   "?" {line=token.beginLine; column=token.beginColumn;}
   [
        "extends" ext = Type()
    |
        "super" sup = Type()
   ]
   { return new WildcardType(tokenImage(line, column, token.endLine, token.endColumn), ext, sup); }
}

List<Node> Arguments() :
{
	List<Node> argumentsList = null;
}
{
   "(" [ argumentsList=ArgumentsList() ] ")"

   { return argumentsList; }
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT && getToken(2).kind == GT && getToken(3).kind == GT } )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT && getToken(2).kind == GT } )
  ">" ">"
  )
}

Expression ShiftExpression() :
{
	Expression expr;
	Expression rhsExpr;
	Operator rshiftOp;
}
{
   expr=AdditiveExpression()
   (
      "<<" rhsExpr=AdditiveExpression() {  expr=new BinaryExpression(Operator.SHIFT_LEFT, expr, rhsExpr); }
      |
      RUNSIGNEDSHIFT() rhsExpr=AdditiveExpression() {  expr=new BinaryExpression(Operator.TREBLE_SHIFT_RIGHT, expr, rhsExpr); }
      |
      RSIGNEDSHIFT() rhsExpr=AdditiveExpression() {  expr=new BinaryExpression(Operator.SHIFT_RIGHT, expr, rhsExpr); }
   )*

   { return expr; }
}

Expression AdditiveExpression() :
{
	Expression expr;
	Expression rhsExpr;
}
{
   expr=MultiplicativeOrRangeExpression()
   (
     LOOKAHEAD(2)(
      "+" rhsExpr=MultiplicativeOrRangeExpression() {  expr=new BinaryExpression(Operator.PLUS, expr, rhsExpr); }
      |
      "-" rhsExpr=MultiplicativeOrRangeExpression() {  expr=new BinaryExpression(Operator.MINUS, expr, rhsExpr); }
     )
   )*

   { return expr; }
}

Expression MultiplicativeOrRangeExpression() :
{
    Expression expr;
}
{
   (
      LOOKAHEAD( RangeExpression() )
      expr=RangeExpression()
      |
      expr=MultiplicativeExpression()
   )

   { return expr; }
}

RangeExpression RangeExpression() :
{
    Expression lhsExpr = null;
    Expression rhsExpr = null;
    Operator operator = null;
}
{
  (
    lhsExpr=UnaryExpression()

    (
       ".." { operator = Operator.RANGE_INCLUSIVE; }
       |
       "<..>" { operator = Operator.RANGE_LEFT_LT_RIGHT_GT; }
       |
       "<..>=" { operator = Operator.RANGE_LEFT_LT_RIGHT_GTE; }
       |
       "<.." { operator = Operator.RANGE_LEFT_LT_RIGHT_INCLUSIVE; }
       |
       "<..<" { operator = Operator.RANGE_LEFT_LT_RIGHT_LT; }
       |
       "<..<=" { operator = Operator.RANGE_LEFT_LT_RIGHT_LTE; }
       |
       "<=..>" { operator = Operator.RANGE_LEFT_LTE_RIGHT_GT; }
       |
       "<=..>=" { operator = Operator.RANGE_LEFT_LTE_RIGHT_GTE; }
       |
       "<=.." { operator = Operator.RANGE_LEFT_LTE_RIGHT_INCLUSIVE; }
       |
       "<=..<" { operator = Operator.RANGE_LEFT_LTE_RIGHT_LT; }
       |
       "<=..<=" { operator = Operator.RANGE_LEFT_LTE_RIGHT_LTE; }
       |
       ">..>" { operator = Operator.RANGE_LEFT_GT_RIGHT_GT; }
       |
       ">..>=" { operator = Operator.RANGE_LEFT_GT_RIGHT_GTE; }
       |
       ">.." { operator = Operator.RANGE_LEFT_GT_RIGHT_INCLUSIVE; }
       |
       ">..<" { operator = Operator.RANGE_LEFT_GT_RIGHT_LT; }
       |
       ">..<=" { operator = Operator.RANGE_LEFT_GT_RIGHT_LTE; }
       |
       ">=..>" { operator = Operator.RANGE_LEFT_GTE_RIGHT_GT; }
       |
       ">=..>=" { operator = Operator.RANGE_LEFT_GTE_RIGHT_GTE; }
       |
       ">=.." { operator = Operator.RANGE_LEFT_GTE_RIGHT_INCLUSIVE; }
       |
       ">=..<" { operator = Operator.RANGE_LEFT_GTE_RIGHT_LT; }
       |
       ">=..<=" { operator = Operator.RANGE_LEFT_GTE_RIGHT_LTE; }
       |
       "..>" { operator = Operator.RANGE_LEFT_INCLUSIVE_RIGHT_GT; }
       |
       "..>=" { operator = Operator.RANGE_LEFT_INCLUSIVE_RIGHT_GTE; }
       |
       "..<" { operator = Operator.RANGE_LEFT_INCLUSIVE_RIGHT_LT; }
       |
       "..<=" { operator = Operator.RANGE_LEFT_INCLUSIVE_RIGHT_LTE; }
    )

    rhsExpr=UnaryExpression()
  )

  { return new RangeExpression(operator, lhsExpr, rhsExpr); }
}

Expression MultiplicativeExpression() :
{
	Expression expr;
	Expression rhsExpr;
}
{
   expr=UnaryExpression()
   (
     LOOKAHEAD(2)(
      "*" rhsExpr=UnaryExpression() {  expr=new BinaryExpression(Operator.STAR, expr, rhsExpr); }
      |
      "/" rhsExpr=UnaryExpression() {  expr=new BinaryExpression(Operator.FORWARD_SLASH, expr, rhsExpr); }
      |
      "%" rhsExpr=UnaryExpression() {  expr=new BinaryExpression(Operator.PERCENT, expr, rhsExpr); }
     )
   )*

   { return expr; }
}

Expression UnaryExpression() :
{
    int startLine = -1, startColumn = -1;
    String operatorSymbol;
	Expression expr;
}
{
   (
        (
            ("+"|"-"|"~"|"!") { startLine=token.beginLine; startColumn=token.beginColumn; operatorSymbol=token.image; }

            expr=UnaryExpression() {  expr=new UnaryExpression(tokenImage(startLine,
                                                                          startColumn,
                                                                          expr.getTokenImage().getEndLine(),
                                                                          expr.getTokenImage().getEndColumn()),
                                                               Operator.forSymbol(operatorSymbol), expr); }
        )
    |
    "++" expr=PostfixExpression() {  expr=new UnaryExpression(tokenImage(), Operator.PRE_INCREMENT, expr); }
    |
    "--" expr=PostfixExpression() {  expr=new UnaryExpression(tokenImage(), Operator.PRE_DECREMENT, expr); }
    |
    <NOT> expr=PostfixExpression() {  expr=new UnaryExpression(tokenImage(), Operator.NOT, expr); }
    |
    expr=PostfixExpression()
   )

   { return expr; }
}

Expression PostfixExpression() :
{
	Expression expr;
	Operator op;
}
{
   expr=Expression()
   [
      LOOKAHEAD(2)
      (
        "++" {  op = Operator.POST_INCREMENT; }
        |
        "--" {  op = Operator.POST_DECREMENT; }
      ) { expr=new UnaryExpression(tokenImage(), op, expr); }
   ]

   { return expr; }
}

public Expression Expression():
{
    Expression ret;
}
{
    (
        ret = Literal()
        |
        ret = IdentifierPrefixed()
        |
        ret = ListExpression()
        |
        ret = MapOrSetExpression()
    )

    { return ret; }
}

public Expression Literal():
{
	Expression ret;
}
{
  (
      <BOOLEAN_LITERAL > { ret = new BooleanLiteralExpr(tokenImage()); }
      |
	  <BINARY_INTEGER_LITERAL> { ret = new BinaryIntegerLiteralExpr(tokenImage()); }
	  |
	  <DECIMAL_INTEGER_LITERAL> { ret = new DecimalIntegerLiteralExpr(tokenImage()); }
	  |
	  <HEX_INTEGER_LITERAL> { ret = new HexadecimalIntegerLiteralExpr(tokenImage()); }
	  |
	  <OCTAL_INTEGER_LITERAL> { ret = new OctalIntegerLiteralExpr(tokenImage()); }
	  |
	  <DECIMAL_FLOATING_POINT_LITERAL> { ret = new DecimalFloatingPointLiteralExpr(tokenImage()); }
	  |
	  <HEX_FLOATING_POINT_LITERAL> { ret = new HexadecimalFloatingPointLiteralExpr(tokenImage()); }
	  |
	  <NULL> { ret = new NullLiteralExpr(tokenImage()); }
	  |
	  <SQ_STRING> { ret = new StringLiteralExpr(tokenImage(), "'"); }
	  |
	  ret=TripleQuoteStringLiteral()
	  |
	  ret=InterpolatedStringLiteral()
  )

  { return ret; }
}

Expression TripleQuoteStringLiteral() :
{
    Node part = null;
    List<Node> parts = null;
    StringBuilder s = new StringBuilder();
    StringBuilder p = new StringBuilder();
    int startLine = -1, startColumn = -1;
    int partStartLine = -1, partStartColumn = -1, partEndLine = -1, partEndColumn = -1;
}
{
    <TQ_STRING_START> { startLine=token.beginLine; startColumn=token.beginColumn; s.append(token.image);}
    (
        <TQ_STRING_CHAR> { s.append(token.image); }
    )*
    <TQ_STRING_END>

    {
         s.append(token.image);

         return new StringLiteralExpr(new TokenImage(startLine, startColumn, token.endLine, token.endColumn, s.toString()), "'''");
    }
}

Expression InterpolatedStringLiteral() :
{
    Node part = null;
    List<Node> parts = null;
    StringBuilder s = new StringBuilder();
    StringBuilder p = new StringBuilder();
    int startLine = -1, startColumn = -1;
    int partStartLine = -1, partStartColumn = -1, partEndLine = -1, partEndColumn = -1;
}
{
    (
        <DQ_INTERP_STRING_START> { startLine=token.beginLine; startColumn=token.beginColumn; s.append("\"");}
        (
            <DQ_INTERP_STRING_CHAR> {
                                        s.append(token.image);

                                        if (p.length() == 0) {
                                            partStartLine = token.beginLine;
                                            partStartColumn = token.beginColumn;
                                        }
                                        partEndLine = token.endLine;
                                        partEndColumn = token.endColumn;
                                        p.append(token.image);
                                    }
            |
            (
                <DQ_INTERP_STRING_COMPLEX_EXPR_START>

                                    {
                                        s.append(token.image);

                                        // Deal with any preceding character data
                                        if (p.length() > 0) {
                                            parts=add(parts,
                                                      new StringLiteralExpr(new TokenImage(partStartLine,
                                                                                           partStartColumn,
                                                                                           partEndLine,
                                                                                           partEndColumn,
                                                                                           p.toString())));
                                            p.setLength(0);
                                        }
                                    }


                ( part=PrimaryExpression() { parts=add(parts, part); s.append(part.getTokenImage().getImage()); })?

                <RBRACE> { s.append(token.image); }
            )
        )*
        <DQ_INTERP_STRING_END>
        {
             s.append(token.image);

             // Deal with any remaining character data
             if (p.length() > 0) {
                 parts=add(parts,
                           new StringLiteralExpr(new TokenImage(partStartLine,
                                                                partStartColumn,
                                                                partEndLine,
                                                                partEndColumn,
                                                                p.toString())));
             }

             return new InterpolatedStringLiteralExpr(new TokenImage(startLine, startColumn, token.endLine, token.endColumn, s.toString()), parts, "\"");
        }
    )
    |
    (
        <TQ_INTERP_STRING_START> { startLine=token.beginLine; startColumn=token.beginColumn; s.append(token.image);}
        (
            (
                (<TQ_INTERP_STRING_CHAR>|<TQ_INTERP_STRING_DQ_CHAR>)
                    {
                        s.append(token.image);

                        if (p.length() == 0) {
                            partStartLine = token.beginLine;
                            partStartColumn = token.beginColumn;
                        }
                        partEndLine = token.endLine;
                        partEndColumn = token.endColumn;
                        p.append(token.image);
                    }
                |
                (
                    <TQ_INTERP_STRING_COMPLEX_EXPR_START>
                        {
                            s.append(token.image);

                            // Deal with any preceding character data
                            if (p.length() > 0) {
                                parts=add(parts,
                                          new StringLiteralExpr(new TokenImage(partStartLine,
                                                                               partStartColumn,
                                                                               partEndLine,
                                                                               partEndColumn,
                                                                               p.toString())));
                                p.setLength(0);
                            }
                        }

                    (part=PrimaryExpression() { parts=add(parts, part); s.append(part.getTokenImage().getImage()); })?

                    <RBRACE> { s.append(token.image); }
                )
            )*
            <TQ_INTERP_STRING_END>
                {
                    s.append(token.image);

                    // Add any trailing single double=quotes to the any remaining character data
                    if ( token.image.length() > 3) {
                        if ( p.length() == 0 ) {
                            // No preceding character data, so start position is here
                            partStartLine = token.beginLine;
                            partStartColumn = token.endColumn - token.image.length() + 1;
                        }
                        partEndLine = token.endLine;
                        partEndColumn = token.endColumn - 3;
                        p.append(token.image.substring(0, token.image.length()-3));
                    }

                    // Deal with any remaining character data
                    if (p.length() > 0) {
                        parts=add(parts,
                                  new StringLiteralExpr(new TokenImage(partStartLine,
                                                                       partStartColumn,
                                                                       partEndLine,
                                                                       partEndColumn,
                                                                       p.toString())));
                    }

                    return new InterpolatedStringLiteralExpr(new TokenImage(startLine, startColumn, token.endLine, token.endColumn, s.toString()), parts, "\"\"\"");
                }
        )
    )
}

public Expression IdentifierPrefixed():
{
    List<Node> argumentsList = null;
    Expression ret;
}
{
    (
        ret = Identifier()

        [ "(" [ argumentsList=ArgumentsList() ] ")"  { ret = new MethodCall((Name)ret, argumentsList); } ]

    )

    { return ret; }
}

public Name Identifier():
{
    Name name;
}
{
    (
        <IDENTIFIER>  { name = new Name(tokenImage(), token.image); }
    )

    { return name; }
}

List<Node> ArgumentsList() :
{
	List<Node> argumentsList = null;
	Expression expr;
}
{
   expr=PrimaryExpression() { argumentsList=add(argumentsList, expr); } ("," expr=PrimaryExpression() { argumentsList=add(argumentsList, expr); } )*

   { return argumentsList; }
}

ListExpr ListExpression() :
{
    int startLine = -1, startColumn = -1;
    List expressionList = null;
    Expression expr = null;
}
{
  "[" {startLine=token.beginLine; startColumn=token.beginColumn;}
	   [
	     expr=Expression() { expressionList=add(expressionList, expr); }
	     ("," expr=Expression() { expressionList=add(expressionList, expr); } )*
	   ]
  "]"

  { return new ListExpr(new TokenImage(startLine,
                                       startColumn,
                                       token.endLine,
                                       token.endColumn,
                                       null), expressionList); }
}

Expression MapOrSetExpression() :
{
    int startLine = -1, startColumn = -1, entryStartLine, entryStartColumn;
    List expressionList = null;
    Expression keyExpr = null, valueExpr = null, expr = null;
    boolean isSet = true, addedFirst = true;
}
{
  "{" {startLine=token.beginLine; startColumn=token.beginColumn;}

  [
     ":" { isSet = false; }
     |
     (
        (
            keyExpr=PrimaryExpression() { addedFirst = false; }
        )

        [
            (
              ("," valueExpr=PrimaryExpression() { if (!addedFirst) { expressionList=add(expressionList, keyExpr); addedFirst = true; }  expressionList=add(expressionList, valueExpr); } )+
            )
            |
            (
                (":" { isSet = false; }
                    [
                       valueExpr=PrimaryExpression() { expressionList=add(expressionList,
                                                                   new MapEntryExpr(new TokenImage(keyExpr.getTokenImage().getStartLine(),
                                                                                                   keyExpr.getTokenImage().getStartColumn(),
                                                                                                   valueExpr.getTokenImage().getEndLine(),
                                                                                                   valueExpr.getTokenImage().getEndColumn()),
                                                                                    keyExpr, valueExpr
                                                                                    ));
                                              }
                       (
                           ","
                           keyExpr=PrimaryExpression()
                           ":"
                           valueExpr=PrimaryExpression() { expressionList=add(expressionList,
                                                                       new MapEntryExpr(new TokenImage(keyExpr.getTokenImage().getStartLine(),
                                                                                                       keyExpr.getTokenImage().getStartColumn(),
                                                                                                       valueExpr.getTokenImage().getEndLine(),
                                                                                                       valueExpr.getTokenImage().getEndColumn()),
                                                                                        keyExpr, valueExpr));
                                                  }

                       )*
                     ]
                )
            )
        ]
     )
  ]

  "}"

    {
        if ( isSet ) {
           if ( !addedFirst ) {
               expressionList=add(expressionList, keyExpr);
           }
           return new SetExpr(new TokenImage(startLine,
                                             startColumn,
                                             token.endLine,
                                             token.endColumn),
                                             expressionList);
        } else {
            return new MapExpr(new TokenImage(startLine, startColumn, token.endLine, token.endColumn), expressionList);
        }
    }
}

ImportDecl ImportDeclaration() :
{
	ImportStmt imp;
	List<ImportStmt> imports = null;
}
{
  ( imp=ImportStatement() { imports = add(imports, imp); } )+

  { return imports == null ? null : new ImportDecl(imports); }
}

ImportStmt ImportStatement() :
{
	int startLine, startColumn;
	boolean isImportOnDemand = false;
	Name name;
	List<Name> nameElements = null;
}
{
  <IMPORT> {startLine=token.beginLine; startColumn=token.beginColumn; }

  name=Identifier() { nameElements=add(nameElements, name); }

  ( "." name=Identifier() { nameElements=add(nameElements, name); } )*

  [ ".*" { isImportOnDemand=true; } ]

  { return new ImportStmt(new TokenImage(startLine, startColumn, token.endLine, token.endColumn), nameElements, isImportOnDemand); }
}

